=begin
#LocationIQ

#LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.

OpenAPI spec version: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'uri'

module LocationIQClient
  class ReverseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Reverse Geocoding
    # Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
    # @param lat Latitude of the location to generate an address for.
    # @param lon Longitude of the location to generate an address for.
    # @param format Format to geocode. Only JSON supported for SDKs
    # @param normalizecity Normalizes village to city level data to city
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :addressdetails Include a breakdown of the address into elements. Defaults to 1. (default to 1)
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [Integer] :namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand.
    # @option opts [Integer] :extratags Include additional information in the result if available, e.g. wikipedia link, opening hours.
    # @option opts [Integer] :statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0
    # @return [Location]
    def reverse(lat, lon, format, normalizecity, opts = {})
      data, _status_code, _headers = reverse_with_http_info(lat, lon, format, normalizecity, opts)
      data
    end

    # Reverse Geocoding
    # Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
    # @param lat Latitude of the location to generate an address for.
    # @param lon Longitude of the location to generate an address for.
    # @param format Format to geocode. Only JSON supported for SDKs
    # @param normalizecity Normalizes village to city level data to city
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :addressdetails Include a breakdown of the address into elements. Defaults to 1.
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [Integer] :namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand.
    # @option opts [Integer] :extratags Include additional information in the result if available, e.g. wikipedia link, opening hours.
    # @option opts [Integer] :statecode Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def reverse_with_http_info(lat, lon, format, normalizecity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReverseApi.reverse ...'
      end
      # verify the required parameter 'lat' is set
      if @api_client.config.client_side_validation && lat.nil?
        fail ArgumentError, "Missing the required parameter 'lat' when calling ReverseApi.reverse"
      end
      if @api_client.config.client_side_validation && lat > 90
        fail ArgumentError, 'invalid value for "lat" when calling ReverseApi.reverse, must be smaller than or equal to 90.'
      end

      if @api_client.config.client_side_validation && lat < -90
        fail ArgumentError, 'invalid value for "lat" when calling ReverseApi.reverse, must be greater than or equal to -90.'
      end

      # verify the required parameter 'lon' is set
      if @api_client.config.client_side_validation && lon.nil?
        fail ArgumentError, "Missing the required parameter 'lon' when calling ReverseApi.reverse"
      end
      if @api_client.config.client_side_validation && lon > 180
        fail ArgumentError, 'invalid value for "lon" when calling ReverseApi.reverse, must be smaller than or equal to 180.'
      end

      if @api_client.config.client_side_validation && lon < -180
        fail ArgumentError, 'invalid value for "lon" when calling ReverseApi.reverse, must be greater than or equal to -180.'
      end

      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ReverseApi.reverse"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'normalizecity' is set
      if @api_client.config.client_side_validation && normalizecity.nil?
        fail ArgumentError, "Missing the required parameter 'normalizecity' when calling ReverseApi.reverse"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1'].include?(normalizecity)
        fail ArgumentError, "invalid value for 'normalizecity', must be one of 1"
      end
      if @api_client.config.client_side_validation && opts[:'addressdetails'] && !['0', '1'].include?(opts[:'addressdetails'])
        fail ArgumentError, 'invalid value for "addressdetails", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'namedetails'] && !['0', '1'].include?(opts[:'namedetails'])
        fail ArgumentError, 'invalid value for "namedetails", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'extratags'] && !['0', '1'].include?(opts[:'extratags'])
        fail ArgumentError, 'invalid value for "extratags", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'statecode'] && !['0', '1'].include?(opts[:'statecode'])
        fail ArgumentError, 'invalid value for "statecode", must be one of 0, 1'
      end
      # resource path
      local_var_path = '/reverse.php'

      # query parameters
      query_params = {}
      query_params[:'lat'] = lat
      query_params[:'lon'] = lon
      query_params[:'format'] = format
      query_params[:'normalizecity'] = normalizecity
      query_params[:'addressdetails'] = opts[:'addressdetails'] if !opts[:'addressdetails'].nil?
      query_params[:'accept-language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      query_params[:'namedetails'] = opts[:'namedetails'] if !opts[:'namedetails'].nil?
      query_params[:'extratags'] = opts[:'extratags'] if !opts[:'extratags'].nil?
      query_params[:'statecode'] = opts[:'statecode'] if !opts[:'statecode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReverseApi#reverse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
