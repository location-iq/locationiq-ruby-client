=begin
#LocationIQ

#LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'uri'

module LocationIQClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Forward Geocoding
    # The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
    # @param q Address to geocode
    # @param format Format to geocode. Only JSON supported for SDKs
    # @param normalizecity For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :addressdetails Include a breakdown of the address into elements. Defaults to 0.
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option.
    # @option opts [Integer] :bounded Restrict the results to only items contained with the viewbox
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10. (default to 10)
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @option opts [Integer] :namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand.
    # @option opts [Integer] :dedupe Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.
    # @option opts [Integer] :extratags Include additional information in the result if available, e.g. wikipedia link, opening hours.
    # @return [Array<Location>]
    def search(q, format, normalizecity, opts = {})
      data, _status_code, _headers = search_with_http_info(q, format, normalizecity, opts)
      data
    end

    # Forward Geocoding
    # The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
    # @param q Address to geocode
    # @param format Format to geocode. Only JSON supported for SDKs
    # @param normalizecity For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :addressdetails Include a breakdown of the address into elements. Defaults to 0.
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option.
    # @option opts [Integer] :bounded Restrict the results to only items contained with the viewbox
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10.
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @option opts [Integer] :namedetails Include a list of alternative names in the results. These may include language variants, references, operator and brand.
    # @option opts [Integer] :dedupe Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested.
    # @option opts [Integer] :extratags Include additional information in the result if available, e.g. wikipedia link, opening hours.
    # @return [Array<(Array<Location>, Fixnum, Hash)>] Array<Location> data, response status code and response headers
    def search_with_http_info(q, format, normalizecity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling SearchApi.search"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SearchApi.search"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'normalizecity' is set
      if @api_client.config.client_side_validation && normalizecity.nil?
        fail ArgumentError, "Missing the required parameter 'normalizecity' when calling SearchApi.search"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1'].include?(normalizecity)
        fail ArgumentError, "invalid value for 'normalizecity', must be one of 1"
      end
      if @api_client.config.client_side_validation && opts[:'addressdetails'] && !['0', '1'].include?(opts[:'addressdetails'])
        fail ArgumentError, 'invalid value for "addressdetails", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'bounded'] && !['0', '1'].include?(opts[:'bounded'])
        fail ArgumentError, 'invalid value for "bounded", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'namedetails'] && !['0', '1'].include?(opts[:'namedetails'])
        fail ArgumentError, 'invalid value for "namedetails", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'dedupe'] && !['0', '1'].include?(opts[:'dedupe'])
        fail ArgumentError, 'invalid value for "dedupe", must be one of 0, 1'
      end
      if @api_client.config.client_side_validation && opts[:'extratags'] && !['0', '1'].include?(opts[:'extratags'])
        fail ArgumentError, 'invalid value for "extratags", must be one of 0, 1'
      end
      # resource path
      local_var_path = '/search.php'

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'format'] = format
      query_params[:'normalizecity'] = normalizecity
      query_params[:'addressdetails'] = opts[:'addressdetails'] if !opts[:'addressdetails'].nil?
      query_params[:'viewbox'] = opts[:'viewbox'] if !opts[:'viewbox'].nil?
      query_params[:'bounded'] = opts[:'bounded'] if !opts[:'bounded'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'accept-language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      query_params[:'countrycodes'] = opts[:'countrycodes'] if !opts[:'countrycodes'].nil?
      query_params[:'namedetails'] = opts[:'namedetails'] if !opts[:'namedetails'].nil?
      query_params[:'dedupe'] = opts[:'dedupe'] if !opts[:'dedupe'].nil?
      query_params[:'extratags'] = opts[:'extratags'] if !opts[:'extratags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Location>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
