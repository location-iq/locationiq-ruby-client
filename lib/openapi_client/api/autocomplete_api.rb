=begin
#LocationIQ

#LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module OpenapiClient
  class AutocompleteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # The Autocomplete API is a variant of the Search API that returns place predictions in response to an HTTP request.  The request specifies a textual search string and optional geographic bounds.  The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types. The Autocomplete API can match on full words as well as substrings. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.
    # @param q [String] Address to geocode
    # @param normalizecity [Integer] For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10. (default to 10)
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box. 
    # @option opts [Integer] :bounded Restrict the results to only items contained with the viewbox
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :tag Restricts the autocomplete search results to elements of specific OSM class and type.  Example - To restrict results to only class place and type city: tag&#x3D;place:city, To restrict the results to all of OSM class place: tag&#x3D;place
    # @return [Array<Object>]
    def autocomplete(q, normalizecity, opts = {})
      data, _status_code, _headers = autocomplete_with_http_info(q, normalizecity, opts)
      data
    end

    # The Autocomplete API is a variant of the Search API that returns place predictions in response to an HTTP request.  The request specifies a textual search string and optional geographic bounds.  The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types. The Autocomplete API can match on full words as well as substrings. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.
    # @param q [String] Address to geocode
    # @param normalizecity [Integer] For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10.
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box. 
    # @option opts [Integer] :bounded Restrict the results to only items contained with the viewbox
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :tag Restricts the autocomplete search results to elements of specific OSM class and type.  Example - To restrict results to only class place and type city: tag&#x3D;place:city, To restrict the results to all of OSM class place: tag&#x3D;place
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def autocomplete_with_http_info(q, normalizecity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutocompleteApi.autocomplete ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling AutocompleteApi.autocomplete"
      end
      # verify the required parameter 'normalizecity' is set
      if @api_client.config.client_side_validation && normalizecity.nil?
        fail ArgumentError, "Missing the required parameter 'normalizecity' when calling AutocompleteApi.autocomplete"
      end
      # verify enum value
      allowable_values = [1]
      if @api_client.config.client_side_validation && !allowable_values.include?(normalizecity)
        fail ArgumentError, "invalid value for \"normalizecity\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'bounded'] && !allowable_values.include?(opts[:'bounded'])
        fail ArgumentError, "invalid value for \"bounded\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/autocomplete.php'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q
      query_params[:'normalizecity'] = normalizecity
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'viewbox'] = opts[:'viewbox'] if !opts[:'viewbox'].nil?
      query_params[:'bounded'] = opts[:'bounded'] if !opts[:'bounded'].nil?
      query_params[:'countrycodes'] = opts[:'countrycodes'] if !opts[:'countrycodes'].nil?
      query_params[:'accept-language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutocompleteApi#autocomplete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
