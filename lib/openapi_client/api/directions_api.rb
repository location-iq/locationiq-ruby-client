=begin
#LocationIQ

#LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module OpenapiClient
  class DirectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Directions Service
    # Finds the fastest route between coordinates in the supplied order.
    # @param coordinates [String] String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180
    # @option opts [String] :radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default)
    # @option opts [String] :generate_hints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String
    # @option opts [String] :approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default)
    # @option opts [String] :exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none.
    # @option opts [Float] :alternatives Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ]
    # @option opts [String] :steps Returned route steps for each route leg [ true, false (default) ]
    # @option opts [String] :annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (default to '\"false\"')
    # @option opts [String] :geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (default to '\"polyline\"')
    # @option opts [String] :overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (default to '\"simplified\"')
    # @option opts [String] :continue_straight Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (default to '\"default\"')
    # @return [DirectionsDirections]
    def directions(coordinates, opts = {})
      data, _status_code, _headers = directions_with_http_info(coordinates, opts)
      data
    end

    # Directions Service
    # Finds the fastest route between coordinates in the supplied order.
    # @param coordinates [String] String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180
    # @option opts [String] :radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default)
    # @option opts [String] :generate_hints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String
    # @option opts [String] :approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default)
    # @option opts [String] :exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none.
    # @option opts [Float] :alternatives Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ]
    # @option opts [String] :steps Returned route steps for each route leg [ true, false (default) ]
    # @option opts [String] :annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ]
    # @option opts [String] :geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ]
    # @option opts [String] :overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ]
    # @option opts [String] :continue_straight Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ]
    # @return [Array<(DirectionsDirections, Integer, Hash)>] DirectionsDirections data, response status code and response headers
    def directions_with_http_info(coordinates, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectionsApi.directions ...'
      end
      # verify the required parameter 'coordinates' is set
      if @api_client.config.client_side_validation && coordinates.nil?
        fail ArgumentError, "Missing the required parameter 'coordinates' when calling DirectionsApi.directions"
      end
      # resource path
      local_var_path = '/directions/driving/{coordinates}'.sub('{' + 'coordinates' + '}', CGI.escape(coordinates.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bearings'] = opts[:'bearings'] if !opts[:'bearings'].nil?
      query_params[:'radiuses'] = opts[:'radiuses'] if !opts[:'radiuses'].nil?
      query_params[:'generate_hints'] = opts[:'generate_hints'] if !opts[:'generate_hints'].nil?
      query_params[:'approaches'] = opts[:'approaches'] if !opts[:'approaches'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'alternatives'] = opts[:'alternatives'] if !opts[:'alternatives'].nil?
      query_params[:'steps'] = opts[:'steps'] if !opts[:'steps'].nil?
      query_params[:'annotations'] = opts[:'annotations'] if !opts[:'annotations'].nil?
      query_params[:'geometries'] = opts[:'geometries'] if !opts[:'geometries'].nil?
      query_params[:'overview'] = opts[:'overview'] if !opts[:'overview'].nil?
      query_params[:'continue_straight'] = opts[:'continue_straight'] if !opts[:'continue_straight'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DirectionsDirections' 

      # auth_names
      auth_names = opts[:auth_names] || ['key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectionsApi#directions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
